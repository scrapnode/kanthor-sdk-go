/*
Kanthor SDK API

SDK API

API version: 1.0
Contact: support@kanthorlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EndpointRuleListRes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointRuleListRes{}

// EndpointRuleListRes struct for EndpointRuleListRes
type EndpointRuleListRes struct {
	Count *int32 `json:"count,omitempty"`
	Data []EndpointRule `json:"data,omitempty"`
}

// NewEndpointRuleListRes instantiates a new EndpointRuleListRes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointRuleListRes() *EndpointRuleListRes {
	this := EndpointRuleListRes{}
	return &this
}

// NewEndpointRuleListResWithDefaults instantiates a new EndpointRuleListRes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointRuleListResWithDefaults() *EndpointRuleListRes {
	this := EndpointRuleListRes{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *EndpointRuleListRes) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointRuleListRes) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *EndpointRuleListRes) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *EndpointRuleListRes) SetCount(v int32) {
	o.Count = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EndpointRuleListRes) GetData() []EndpointRule {
	if o == nil || IsNil(o.Data) {
		var ret []EndpointRule
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointRuleListRes) GetDataOk() ([]EndpointRule, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EndpointRuleListRes) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []EndpointRule and assigns it to the Data field.
func (o *EndpointRuleListRes) SetData(v []EndpointRule) {
	o.Data = v
}

func (o EndpointRuleListRes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointRuleListRes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableEndpointRuleListRes struct {
	value *EndpointRuleListRes
	isSet bool
}

func (v NullableEndpointRuleListRes) Get() *EndpointRuleListRes {
	return v.value
}

func (v *NullableEndpointRuleListRes) Set(val *EndpointRuleListRes) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointRuleListRes) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointRuleListRes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointRuleListRes(val *EndpointRuleListRes) *NullableEndpointRuleListRes {
	return &NullableEndpointRuleListRes{value: val, isSet: true}
}

func (v NullableEndpointRuleListRes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointRuleListRes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


